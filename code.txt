#include <iostream>
#include <iomanip>
#include <vector>

std::string DICT[14] = {"[   ]", "[///]", "[ w ]", "[ b ]", "[|W|]", "[|B|]", "|)W(|",  "|)B(|", "[{W}]", "[{B}]", "|}W{|", "|}B{|", "|]W[|", "|]B[|" };
// white, black, white pawn, black pawn,... rook knight bishop queen king

int board[8][8];
int tempboard[8][8];
std::vector<int> wKingPos = {0,3};
std::vector<int> bKingPos = {7,3};

void initBoard() {
    for (int i = 2; i < 6; i++) {
        for (int j = 0; j < 8; j++) {
            if ((i+j)%2 == 0) {
                board[i][j] = 1;
            } else {
                board[i][j] = 0;
            }
        }
    }
    for (int j = 0; j < 8; j++) {
        board[7][j] = 5+2*j;
        board[0][j] = 4+2*j;
        board[6][j] = 3;
        board[1][j] = 2;

    }
    for (int j = 0; j < 3; j++) {
        board[7][7-j] = 5+2*j;
        board[0][7-j] = 4+2*j;
    }
}

int turn = 0;
std::vector<int> movestart;
std::vector<int> moveend;

void printBoard() {

    if (turn % 2 == 0) {
        for (int i = 7; i >= 0; i--) {
            std::cout<< std::setw(8) << "(" << i << ")";
            for (int j = 7; j >= 0; j--) {
                std::cout<< std::setw(6) << DICT[board[i][j]];
            }
            std::cout << std::endl << std::endl;
        }
        std::cout<< std::setw(9) << "Y/X";
        for (int j = 0; j < 8; j++) {
            std::cout<< std::setw(4) << "(" << j << ")";
        }
        std::cout << std::endl;

        std::cout << "White's turn."<< std::endl;
    } else {
        for (int i = 0; i < 8; i++) {
            std::cout<< std::setw(8) << "(" << i << ")";
            for (int j = 7; j >= 0; j--) {
                std::cout<< std::setw(6) << DICT[board[i][j]];
            }
            std::cout << std::endl << std::endl;
        }
        std::cout<< std::setw(9) << "Y/X";
        for (int j = 7; j >=0; j--) {
            std::cout<< std::setw(4) << "(" << j << ")";
        }
        std::cout << std::endl;

        std::cout << "Black's turn."<< std::endl;
    }
}


class move {
public:
    std::vector<int> start;
    std::vector<int> end;

    int piece = board[start[0]][start[1]];
    int target = board[end[0]][end[1]];

    move(std::vector<int> start, std::vector<int> end) : start(start), end(end) {}
    bool treason(std::vector<int> start, std::vector<int> end) {
        if (target >1 && piece%2 == target%2) { //on essaye de se prendre sa propre piece ou de ne pas bouger
            return false;
        } return true;
    }
    virtual bool legalMove(std::vector<int> start, std::vector<int> end) {
        return false;
    }
};

class pawn : public move {
public:
    pawn(std::vector<int> start, std::vector<int> end) : move(start, end) {}
    bool legalMove(std::vector<int> start, std::vector<int> end) override {

        int direction = 1-2*turn; //1 si blanc, -1 si noir

        if (target >1) { //la case target contient une piece
            if (start[0]==end[0]-direction && (start[1]==end[1]-1 || start[1]==end[1]+1)) {
                return true;
            } else {
                return false;
            }
        } else if (start[0]==end[0]-direction && start[1]==end[1]) { //mouvement normal
            return true;
        } else if (start[0]==end[0]-2*direction && start[1]==end[1] && start[0]==direction%8) { //premier mouvement
            return true;
        } //mouvement illegal
            return false;

    }
};

class rook : public move {
public:
    rook(std::vector<int> start, std::vector<int> end) : move(start, end) {}
    bool legalMove(std::vector<int> start, std::vector<int> end) override {

        int axis; //sur quel axe se fera le deplacement
        if (start[0]==end[0]) {
            axis = 1;
        } else if (start[1]==end[1]) {
            axis = 0;
        } else {return false;}
            if (end[axis]>start[axis]) {
                for (int i = start[axis]+1; i < end[axis]; i++) {
                    if (board[start[1-axis]][i] >1) {
                        return false;
                    }
                } return true;
            } else {
                for (int i = end[axis]+1; i < start[axis]; i++) {
                    if (board[start[1-axis]][i] >1) {
                        return false;
                    }
                } return true;
            } return false;
    }
};

class knight : public move {
public:
    knight(std::vector<int> start, std::vector<int> end) : move(start, end) {}
    bool legalMove(std::vector<int> start, std::vector<int> end) override {
        if (abs(start[0]-end[0])==2 && abs(start[1]-end[1])==1) {
            return true;
        } else if (abs(start[0]-end[0])==1 && abs(start[1]-end[1])==2) {
            return true;
        } return false;
    }
};

class bishop : public move {
public:
    bishop(std::vector<int> start, std::vector<int> end) : move(start, end) {}
    bool legalMove(std::vector<int> start, std::vector<int> end) override {

        int axis[2]; //plus la meme variable
        if (abs(start[0]-end[0])!=abs(start[1]==end[1])) {
            return false;
        }
        if (start[0]<end[0]) {
            axis[0] = 1;
        } else {
            axis[0] = -1;
        } if (start[1]<end[1]) {
            axis[1] = 1;
        } else {
            axis[1] = -1;
        }

        for (int i = 1; i < abs(start[0]-end[0]); i++) {
            if (board[start[0]+axis[0]*i][start[1]+axis[1]*i] >1) {
                return false;
            }
        } return true;
    }
};

class queen : public move {
public:
    queen(std::vector<int> start, std::vector<int> end) : move(start, end) {}
    bool legalMove(std::vector<int> start, std::vector<int> end) override {

        rook queenrook(start, end);
        bishop queenbishop(start, end);
        if (queenrook.legalMove(start, end) || queenbishop.legalMove(start, end)) {
            return true;
        } return false;
    }
};

class king : public move {
public:
    king(std::vector<int> start, std::vector<int> end) : move(start, end) {}
    bool legalMove(std::vector<int> start, std::vector<int> end) override {
        if (abs(start[0]-end[0])>1 || abs(start[1]-end[1])>1) {
            return false;
        } else {return true;}
    }
}; //ne verifie pas si le roi se met en danger

bool testMove(std::vector<int> start, std::vector<int> end) {
    int piece = board[start[0]][start[1]];
    if (piece<2) {
        return false;
    } else if (piece>1 && piece<4) {
        pawn pawnMove(start, end);
        if (not pawnMove.treason(start, end)) {
            return false;
        } return pawnMove.legalMove(start, end);

    } else if (piece>3 && piece<6) {
        rook rookMove(start, end);
        if (not rookMove.treason(start, end)) {
            return false;
        } return rookMove.legalMove(start, end);
    } else if (piece>5 && piece<8) {
        return false; //code horse
    } else if (piece>7 && piece<10) {
        bishop bishopMove(start, end);
        if (not bishopMove.treason(start, end)) {
            return false;
        } return bishopMove.legalMove(start, end);
    } else if (piece>9 && piece<12) {
        queen queenMove(start, end);
        if (not queenMove.treason(start, end)) {
            return false;
        } return queenMove.legalMove(start, end);
    }else {
        king kingMove(start, end);
        if (not kingMove.treason(start, end)) {
            return false;
        } return kingMove.legalMove(start, end);
    }
}

// int check() {
//
//     for (int i = 0; i<8; i++) {
//         for (int j = 0; j<8; j++) {
//             if (board[i][j]>1) {
//                 std::vector<int> threat = {i,j};
//                 if (testMove(threat,wKingPos)) {
//                     return 0;
//                 } else if (testMove(threat,bKingPos)) {
//                     return 1;
//                 }
//             }
//         }
//     } return -1;
// } //renvoie 0 si blanc est mis en echec, 1 si noir est mis en echec et -1 sinon

void movePiece(std::vector<int> start, std::vector<int> end) {
    board[end[0]][end[1]] = board[start[0]][start[1]];
    if ((start[0]+start[1])%2 == 0) {
        board[start[0]][start[1]] = 0;
    } else {
        board[start[0]][start[1]] = 1;
    }
} //modifie board

void chooseMove() {
    std::cout << "Starting position : X then Y coords ?" << std::endl;
    std::cin >> movestart[1] >> movestart[0];
    std::cout << "Ending position : X then Y coords ?" << std::endl;
    std::cin >> moveend[1] >> moveend[0];
} //movestart, moveend sont modifi√©s

int main() {
    initBoard();
    for (int i = 0; i < 8; i++) {
        printBoard();
        chooseMove();
        if (testMove(movestart, moveend)) {
            if (board[movestart[0]][movestart[1]]>11) {
                //std::copy(std::begin(board), std::end(board), std::begin(tempboard));
                movePiece(movestart, moveend);
                // if (check() == turn) {
                //     std::copy(std::begin(tempboard), std::end(tempboard), std::begin(board));
                //     std::cout << "This move is not legal." << std::endl;
                // }
            } else {
                movePiece(movestart, moveend);
                turn ++;
            }
        }
    }
    return 0;
}

